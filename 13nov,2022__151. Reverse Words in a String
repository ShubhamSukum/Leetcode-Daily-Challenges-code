151. Reverse Words in a String
Medium

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?

ANSWER: -

// space O(1) Approach by: - https://leetcode.com/problems/reverse-words-in-a-string/discuss/1531693/C++-2-solutions-O(1)-space-Picture-explain-Clean-and-Concise
class Solution {
public:
    string reverseWords(string s) {
        reverse(s.begin(), s.end());
        int l = 0, r = 0, i = 0, n = s.size();
        while (i < n) {
            while (i < n && s[i] != ' ')
                s[r++] = s[i++];

            if (l < r) { // if we can find a non-empty word then
                reverse(s.begin() + l, s.begin() + r); // reverse current word
                if (r == n) break;
                s[r++] = ' '; // set empty space
                l = r;
            }
            ++i; // now i == n or s[i] == ' ', so we skip that character!
        }
        if (r > 0 && s[r-1] == ' ') --r; // skip last empty character if have
        s.resize(r);
        return s;
    }
};

/*
Without O(1) space.

class Solution {
public:
    string reverseWords(string s) {
        string result;
        int i=0;
        int N=s.size();
        
        while(i<N)
        {
            while(i<N && s[i]==' ') i++;
            
            if(i>=N)break;
            
            int j=i+1;
            
            while(j<N && s[j]!=' ') j++;
            
            string sub=s.substr(i,j-i);   // i is starting index and j-i is count upto which it should cut the string.
            
            if(result.size() == 0) result=sub;
            else result=sub + " " + result;
            
            i=j+1;
        }
        return result;
    }
};
*/
