1026. Maximum Difference Between Node and Ancestor
Medium

Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

Example 1:

Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [2, 5000].
0 <= Node.val <= 105
Accepted
158.9K
Submissions
213.7K
Acceptance Rate
74.4%

ANSWER =>
// optimised short code

int maxAncestorDiff(TreeNode* r, int mn = 100000, int mx = 0) 
{
        return r ? max(maxAncestorDiff(r->left, min(mn, r->val), max(mx, r->val)),
        maxAncestorDiff(r->right, min(mn, r->val), max(mx, r->val))) : mx - mn;
}

// long code
class Solution {
public:
    int funk(TreeNode *root,int miny,int maxy)
    {
        if(root==NULL) return maxy-miny;

        maxy=max(root->val,maxy);
        miny=min(root->val,miny);

        int left=funk(root->left,miny,maxy);
        int right=funk(root->right,miny,maxy);

        return max(left,right);
    } 

    int maxAncestorDiff(TreeNode* root) {
        if(root==NULL) return 0;

        return funk(root,root->val,root->val);
    }
};
