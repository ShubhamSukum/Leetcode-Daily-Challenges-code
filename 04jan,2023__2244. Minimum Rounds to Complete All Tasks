2244. Minimum Rounds to Complete All Tasks
Medium

You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.
 

Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109
Accepted
75.5K
Submissions
120.2K
Acceptance Rate
62.8%

ANSWER => https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/solutions/2995603/simple-modulus-map-approach/?orderBy=most_votes

// My solution
class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        int temp=0,sum=0;
        unordered_map<int,int> mp;

        // Counting frequency
        for(auto x:tasks)mp[x]++;

        for(auto x:mp)
        {
            if(x.second==1)return -1;

            temp=x.second/3;

            if(x.second>3 && x.second%3==1)sum+=temp-1;
            else sum+=temp;
            
            if(x.second%3==1)sum+=2;
            else if(x.second%3==2)sum+=1;
        }

        return sum;
    }
};
