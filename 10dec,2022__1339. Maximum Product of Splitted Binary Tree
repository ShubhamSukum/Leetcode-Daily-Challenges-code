1339. Maximum Product of Splitted Binary Tree
Medium

Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.

Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.

Note that you need to maximize the answer before taking the mod and not after taking it.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: 110
Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)
Example 2:


Input: root = [1,null,2,3,4,null,null,5,6]
Output: 90
Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)
 

Constraints:

The number of nodes in the tree is in the range [2, 5 * 104].
1 <= Node.val <= 104
Accepted
73K
Submissions
163.4K
Acceptance Rate
44.7%

ANSWER => 
class Solution {
public:
    // short and optimised by lee215
    long res = 0, total = 0, sub;
    int maxProduct(TreeNode* root) {
        total = s(root), s(root);
        return res % (int)(1e9 + 7);
    }

    int s(TreeNode* root) {
        if (!root) return 0;
        sub = root->val + s(root->left) + s(root->right);
        res = max(res, sub * (total - sub));
        return sub;
    }

    /*  long simple code
    long long sumy(TreeNode* root)  // calculating total sum
    {
        if(!root)return 0;

        return sumy(root->left)+sumy(root->right)+root->val;
    }

    long long another(TreeNode* root,long long total,long long& ans) // best subtree value
    {
        if(!root) return 0;

        long long subT=0;

        subT+=another(root->left,total,ans);
        subT+=another(root->right,total,ans);
        subT+=root->val;

        if(subT*(total-subT) > ans) ans=subT*(total-subT);
        return subT;
    }
    
    int maxProduct(TreeNode* root) {
        long long ans=0;
        long long total=sumy(root);
        another(root,total,ans);
        return ans%1000000007;
    }
    */
};
