131. Palindrome Partitioning
Medium

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.
Accepted
572.5K
Submissions
902.8K
Acceptance Rate
63.4%

ANSWER =>

class Solution {
public:
    void func(int ind,string s,vector<vector<string>>& ans,vector<string>& part)
    {
        if(ind==s.size())
        {
            ans.push_back(part);
            return;
        }

        for(int i=ind;i<s.size();i++)
        {
            if(isPalindrome(s,ind,i))
            {
                part.push_back(s.substr(ind,i-ind+1));
                func(i+1,s,ans,part);
                part.pop_back();
            }
        }
    }

    bool isPalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start++]!=s[end--])return false;
        }
        return true;
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> part;
        func(0,s,ans,part);
        return ans;
    }
};
