IMPLEMENTED Without reference(although logic mahit hott XD)
26th November,2022 ;)

20. Valid Parentheses
Easy

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

ANSWER :)  => 

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        
        for(auto x: s)   
        {
            if(x == '(' || x == '{' || x == '[') st.push(x);
            else if(x == ')')
            {
                if(st.empty()) return false;
                if(st.top() == '(') 
                {
                    st.pop();
                    continue;
                }
                else return false;
            }
            else if(x == '}')
            {
                if(st.empty()) return false;
                if(st.top() == '{') 
                {
                    st.pop();
                    continue;
                }
                else return false;
            }
            else if(x == ']')
            {
                if(st.empty()) return false;
                if(st.top() == '[') 
                {
                    st.pop();
                    continue;
                }
                else return false;
            }                   
            else return false;
        }
        
        if(st.empty())
            return true;
        
        return false;
    }
};
