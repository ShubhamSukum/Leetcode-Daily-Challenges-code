108. Convert Sorted Array to Binary Search Tree
Easy

Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.
Accepted
916.4K
Submissions
1.3M
Acceptance Rate
69.3%

ANSWER =>

class Solution {
public:
    TreeNode* dfs(vector<int>& nums,int left,int right)
    {
        if(left>right) return NULL;

        int mid=(left+right)/2;

        // here mid is index cuz when we are taking 0 and size-1 
        // means we are dealing with indexx not value 
        /* dfs(nums,0,nums.size()-1); */
        TreeNode* reti=new TreeNode(nums[mid]);

        reti->left=dfs(nums,left,mid-1);
        reti->right=dfs(nums,mid+1,right);

        return reti;
    }

    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return dfs(nums,0,nums.size()-1);
    }
};
