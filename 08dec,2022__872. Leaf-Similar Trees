872. Leaf-Similar Trees
Easy

Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.


For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.


Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
Example 2:


Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 

Constraints:

The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].
Accepted
201.9K
Submissions
305.3K
Acceptance Rate
66.1%

ANSWER =>

// short one

class Solution {
    vector<int> v1;
    vector<int> v2;
public:
    void printLeaf(TreeNode* root, vector<int> &v) {
        if(root == NULL) return;

        // InOrder Traversal
        printLeaf(root->left, v);
        if(root->left == NULL && root->right == NULL) v.push_back(root->val);
        printLeaf(root->right, v);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        printLeaf(root1, v1);
        printLeaf(root2, v2);
        return v1==v2;
    }
};

// long one. DFS

class Solution {
public:
    vector<int> v;
    void dfs(TreeNode *root){
        if(root==NULL){
            return ;
        }
        if(root->left==NULL && root->right==NULL){
            v.push_back(root->val);
            return ;
        }
        
        dfs(root->left);
        dfs(root->right);
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        
        v.clear();
        dfs(root1);
        vector<int> v1;
        
        for(int i=0;i<v.size();i++){
            v1.push_back(v[i]);
        }
        v.clear();
        dfs(root2);
        
        if(v.size()!=v1.size()) return 0;
        
        for(int i=0;i<v.size();i++){
            if(v[i]!=v1[i]){
                return 0;
            }
        }
        
        return 1;
    }
};
