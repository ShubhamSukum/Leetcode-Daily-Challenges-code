907. Sum of Subarray Minimums

Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:

Input: arr = [11,81,94,43,3]
Output: 444

 

Constraints:

    1 <= arr.length <= 3 * 104
    1 <= arr[i] <= 3 * 104


ANSWER =>

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
       stack<int> st;
            int ans = 0;
            int mod = 1e9 + 7;
            int n = arr.size();
            for (int i = 0; i <= arr.size(); i++)
            {
                while (!st.empty() && (i == n || arr[st.top()] >= arr[i]))
                {
                    int idx = st.top();
                    st.pop();

                    long right = i < n ? i - idx : n - idx;
                    long left = st.empty() ? idx + 1 : idx - st.top();

                    ans = (ans + left *right *arr[idx]) % mod;
                }
                st.push(i);
            }
            return ans; 
    }
};
