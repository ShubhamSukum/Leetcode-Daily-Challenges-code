149. Max Points on a Line
Hard

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.
Accepted
268.4K
Submissions
1.2M
Acceptance Rate
22.3%

ANSWER =>

// optimised one
class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int n=points.size();
        if(n==1)return 1;
        int maxPoints=0;
        for(int i=0;i<n;i++)
        {
            unordered_map<double,int>m;
            for(int j=i+1;j<n;j++)
            {
                double x1=points[i][0];
                double y1=points[i][1];
                double x2=points[j][0];
                double y2=points[j][1];
                double slope;
                double dx=x2-x1;
                if(dx==0)
                slope=INT_MAX;
                else
                slope=((y2-y1)/dx);
                m[slope]++;
                maxPoints=max(maxPoints,m[slope]+1);
            }
        }
        return maxPoints;
    }
};

// O(n*n*n)

class Solution {
public:
    int maxPoints(vector<vector<int>>& p) {
        int n=p.size();

        if(n<=2)return n;

        int maxi=2;

        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int total=2;
                for(int k=0;k<n;k++)
                {
                    if(k!=i and k!=j)
                    {
                        if((p[j][1]-p[i][1]) * (p[i][0]-p[k][0]) == (p[i][1]-p[k][1]) * (p[j][0]-p[i][0]))
                            total++;
                    }
                }

                maxi=max(total,maxi);
            }
        }

        return maxi;
    }
};
