100. Same Tree
Easy

Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

Example 1:


Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:


Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-104 <= Node.val <= 104
Accepted
1.4M
Submissions
2.4M
Acceptance Rate
57.0%

ANSWER =>

class Solution {
public:
    // // TC => O(N)
    // // SC => O(N)
    // bool isSameTree(TreeNode* p, TreeNode* q)
    // {
    //     if(p == NULL && q == NULL)
    //         return true;
    //     if((p != NULL && q == NULL) || (p == NULL && q != NULL))
    //         return false;

    //     if(p->val != q->val)
    //         return false;

    //     bool l = isSameTree(p->left, q->left);
    //     bool r = isSameTree(p->right, q->right);

    //     return l & r;   
    // }




    // TC => O(N)
    // SC => O(N)
    bool isOneNull(TreeNode *a, TreeNode *b)
    {
        if((a == NULL && b != NULL) || (a != NULL && b == NULL))
            return true;
        return false;
    }
    bool isSameTree(TreeNode* p, TreeNode* q)
    {
        if(p == NULL && q == NULL)
            return true;
        else if(isOneNull(p, q))
            return false;

        stack<pair<TreeNode*, TreeNode*>> st;
        st.push({p, q});

        while(!st.empty())
        {
            TreeNode* ltree = st.top().first;
            TreeNode* rtree = st.top().second;
            st.pop();

            if(ltree->val != rtree->val)
                return false;
            
            if(isOneNull(ltree->left, rtree->left) || isOneNull(ltree->right, rtree->right))
                return false;

            if(ltree->right != NULL && rtree->right != NULL)
                st.push({ltree->right, rtree->right});
                
            if(ltree->left != NULL && rtree->left != NULL)
                st.push({ltree->left, rtree->left});
        }

        return true;
    }
};
