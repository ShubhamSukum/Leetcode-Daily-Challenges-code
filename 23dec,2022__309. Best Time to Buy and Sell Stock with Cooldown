309. Best Time to Buy and Sell Stock with Cooldown
Medium

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000
Accepted
350.9K
Submissions
636.8K
Acceptance Rate
55.1%

ANSWER =>

class Solution {
public:  // for more solution(optimised) refer => https://youtu.be/IGIe46xw3YY
    
    int g(int ind,int buy,vector<int>& prices,vector<vector<int>>& dp)
    {
        if(ind>=prices.size()) return 0;

        if(dp[ind][buy]!=-1) return dp[ind][buy]; 

        if(buy==1)  // 1 means we can buy and  0 means we can't buy
        {
            return dp[ind][buy]=max(g(ind+1,0,prices,dp)-prices[ind] , 0 + g(ind+1,1,prices,dp)); 
        // 1) 0 + because we didn't buy anything we hold it and 1 because we can buy later as we idn't buy      
        }

        return dp[ind][buy]=max(prices[ind]+g(ind+2,1,prices,dp),0+g(ind+1,0,prices,dp));   
        // ind+2 because we'll have a cooldown so.
    }
    
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(),vector<int> (2,-1));
        return g(0,1,prices,dp);
    }
};
