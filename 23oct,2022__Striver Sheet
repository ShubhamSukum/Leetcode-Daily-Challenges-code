287. Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?


ANSWER:-


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // sort(nums.begin(),nums.end());   // My Naive approach
        // int x=0;
        // for(int i=0;i<nums.size();i++)
        // {
        //     if(nums[i]==nums[i+1])
        //         return nums[i];
        // }
        // return x;
        
        // Striver video logic  Link: - https://youtu.be/32Ll35mhWg0
        
        // Runtime: 114 ms, faster than 96.36% of C++ online submissions for Find the Duplicate Number.
        // Memory Usage: 61.2 MB, less than 91.60% of C++ online submissions for Find the Duplicate Number.
        int slow=nums[0];
        int fast=nums[0];
        
        do
        {   // Slow pointer fast pointer approach with linked list cycle method
            slow=nums[slow];        // moving pointer by 1      for Test case 1: 1 -> 3 -> 2 -> 4 -> 2
            fast=nums[nums[fast]];  // moving pointer by 2
        }
        while(slow!=fast);
            
        fast=nums[0];
        
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        
        return slow;
    }
};
