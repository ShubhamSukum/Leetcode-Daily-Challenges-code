790. Domino and Tromino Tiling
Medium

You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.

Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

Example 1:


Input: n = 3
Output: 5
Explanation: The five different ways are show above.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 1000
Accepted
69.8K
Submissions
137.7K
Acceptance Rate
50.7%

ANSWER =>

class Solution {
public:
    // Find pattern approach 
	const int MOD = 1e9+7;
    int numTilings(int n) {
        vector<long long> v(1001,0);
        v[1]=1;
        v[2]=2;
        v[3]=5;

        if(n<=3) return v[n];

        for(int i=4;i<=n;i++)
        {
            v[i]=2*v[i-1]+v[i-3];
            v[i]%=MOD;
        }
        return v[n];
    }
};

/*  DP 
// credits => https://leetcode.com/problems/domino-and-tromino-tiling/solutions/1620975/c-python-simple-solution-w-images-explanation-optimization-from-brute-force-to-dp/?orderBy=most_votes

if(n <= 2) return n;
		// filled_prev = dp[i-1][0], filled_prev2 = dp[i-2][0]...same for gap_prev & gap_prev2
        int filled_prev = 2, gap_prev = 2, filled_prev2 = 1, gap_prev2 = 1;
        for(int i = 3; i <= n; i++) {
            int filled = (filled_prev + filled_prev2 + 2l*gap_prev2) % MOD;
            int gap = (filled_prev + gap_prev) % MOD;
            
            filled_prev2 = filled_prev, filled_prev = filled;
            gap_prev2 = gap_prev, gap_prev = gap;
        }
        return filled_prev;
*/
