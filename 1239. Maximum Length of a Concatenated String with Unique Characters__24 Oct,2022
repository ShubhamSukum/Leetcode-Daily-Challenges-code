You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.
Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").
Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
 

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lowercase English letters.


ANSWER: -

class Solution {
public:
    void f(int ind,vector<int> vis,vector<string>& arr,int curLen,int& maxLen)
    {
        if(ind<0)
        {
            maxLen=max(maxLen,curLen);
            return;
        }
        
        int n=arr[ind].size();
        int flag=0;
        vector<int> t=vis;
        
        for(int i=0;i<n;i++)
        {
            char ch=arr[ind][i];
            if(t[ch-'a']==1)
            {
                flag=1;
                break;
            }
            t[ch-'a']=1;
        }
        
        if(flag==0){
            f(ind-1,t,arr,curLen+arr[ind].size(),maxLen);   // took
        }
        
        f(ind-1,vis,arr,curLen,maxLen);     // didn't took
    }
    
    int maxLength(vector<string>& arr) {
        int curLen=0;
        int n=arr.size();
        vector<int> vis(26,0);
        int maxLen=0;
        f(n-1,vis,arr,curLen,maxLen);
        return maxLen;
    }
};
